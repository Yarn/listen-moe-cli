
version: 2.1

jobs:
  build:
    docker:
      # - image: rust:1
      - image: circleci/rust:1
    environment:
      TARGET: x86_64-unknown-linux-gnu
      PKG_CONFIG_ALLOW_CROSS: 1
    steps:
      - checkout
      - attach_workspace:
          at: ./release
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      # - run:
      #     name: Install Target
      #     command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Install Dependencies
          command: sudo apt-get install libasound2-dev libssl-dev
      # - run:
      #     name: Calculate dependencies
      #     command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v7-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build debug
          # command: cargo build --all --all-targets
          command: cargo build --target "$TARGET"
      - run:
          name: Build
          command: cargo build --release --target "$TARGET"
      - run:
          name: prepare release zip
          command: zip --junk-paths "release/$CIRCLE_PROJECT_REPONAME-$CIRCLE_TAG-x86_64-unknown-linux-gnu.zip" ./target/x86_64-unknown-linux-gnu/release/listen-moe-cli
      - store_artifacts:
          # path: ./target/x86_64-unknown-linux-gnu/release/listen-moe-cli
          path: ./release
          destination: .
      - persist_to_workspace:
          root: ./release
          paths:
            - "*"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug
            - target/release
            - target/x86_64-unknown-linux-gnu/debug/.fingerprint
            - target/x86_64-unknown-linux-gnu/debug/build
            - target/x86_64-unknown-linux-gnu/debug/deps
            - target/x86_64-unknown-linux-gnu/release/.fingerprint
            - target/x86_64-unknown-linux-gnu/release/build
            - target/x86_64-unknown-linux-gnu/release/deps
            # - /usr/local/rustup
          key: v7-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Run all tests
          command: cargo test --target "$TARGET"
  build-arm:
    docker:
      # - image: rust:1
      - image: circleci/rust:1
    environment:
      TARGET: arm-unknown-linux-gnueabihf
      PKG_CONFIG_ALLOW_CROSS: 1
      RUSTFLAGS: "-C linker=arm-linux-gnueabihf-gcc -L/usr/arm-linux-gnueabihf/lib -L./deps_root/usr/lib/arm-linux-gnueabihf -L/usr/lib/arm-linux-gnueabihf"
      OPENSSL_DIR: /project/deps_root/usr
      OPENSSL_LIB_DIR: /project/deps_root/usr/lib/arm-linux-gnueabihf
      OPENSSL_INCLUDE_DIR: /project/deps_root/usr/include/arm-linux-gnueabihf
      SHORT_TARGET: armv6
    steps:
      - checkout
      - attach_workspace:
          at: ./release
      - run:
          name: Symlink Project
          command: sudo ln -s `pwd` /project
      - restore_cache:
          keys:
            - v9-cargo-cache-arm-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Rust Setup
          command: |
            rustup target add $TARGET
      - run:
          name: Install Dependencies
          command: |
            echo "deb [arch=armhf] http://deb.debian.org/debian buster main" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install gcc-arm-linux-gnueabihf
            
            sudo apt-get install libasound2-dev
            sudo apt-get download libasound2:armhf
            sudo apt-get download libasound2-dev:armhf
            sudo apt-get download libssl-dev:armhf
            # sudo apt-get download libssl1.0.0:armhf
            dpkg -x libasound2_*.deb ./deps_root/
            dpkg -x libssl-dev*.deb ./deps_root/
            # dpkg -x libssl1.0.0*.deb ./deps_root/
            dpkg -x libasound2-dev*.deb ./deps_root/
            
            # set -x PKG_CONFIG_PATH ./deps_root/usr/lib/arm-linux-gnueabihf/pkgconfig/alsa.pc $PKG_CONFIG_PATH
      - run:
          name: Rust Build
          command: |
            cargo build --target=$TARGET --release
      - run:
          name: prepare release zip
          command: zip --junk-paths "release/$CIRCLE_PROJECT_REPONAME-$CIRCLE_TAG-arm-unknown-linux-gnueabihf.zip" ./target/arm-unknown-linux-gnueabihf/release/listen-moe-cli
      - store_artifacts:
          # path: ./target/x86_64-unknown-linux-gnu/release/listen-moe-cli
          path: ./release
          destination: arm
      - persist_to_workspace:
          root: ./release
          paths:
            - "*"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
            # - /usr/local/rustup
          key: v9-cargo-cache-arm-{{ arch }}-{{ checksum "Cargo.lock" }}
  
  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    # requires:
    #   - build
    # filters:
    #   branches:
    #     ignore: /.*/
    #   tags:
    #     only: /^\d+\.\d+\.\d+.*$/
    steps:
      - attach_workspace:
          at: ./release
      - run:
          name: Deploy Release
          command: |
            # ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./release/

workflows:
  version: 2.1
  build:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
  build-arm:
    jobs:
      - build-arm:
          filters:
            tags:
              ignore: /.*/
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+.*$/
      - build-arm:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+.*$/
      - publish-github-release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+.*$/
          requires:
            - build
            - build-arm